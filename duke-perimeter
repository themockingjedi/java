package perimeter_quiz;

import edu.duke.*;
import java.io.File;

public class PerimeterAssignmentRunner {
    public double getPerimeter (Shape s) {
        // Start with totalPerim = 0
        double totalPerim = 0.0;
        // Start wth prevPt = the last point 
        Point prevPt = s.getLastPoint();
        // For each point currPt in the shape,
        for (Point currPt : s.getPoints()) {
            // Find distance from prevPt point to currPt 
            double currDist = prevPt.distance(currPt);
            // Update totalPerim by currDist
            totalPerim = totalPerim + currDist;
            // Update prevPt to be currPt
            prevPt = currPt;
        }
        // totalPerim is the answer
        return totalPerim;
    }

    public int getNumPoints (Shape s) {
        // start with totalPt = 0
        int numPt = 0;
        int totalPt = 0;
        int thisPt;
        //start with prevPt = the last point
        Point prevPt = s.getLastPoint();
        //for each point currPt in the shape
            for (Point currPt : s.getPoints()){
            //add next point nextPt to prevPt
            //update totalPt by currPt
            totalPt = thisPt;
            //update currPt to be numPt
            thisPt = numPt;
        return numPt;
    }
    }

    public double getAverageLength(Shape s) {
   double avgPerim = 0.0;
   
   for (Point currPt : s.getPoints()) {
       double average = getPerimeter(s)/getNumPoints(s);       
   
    }
    return avgPerim;
   }
   
    public double getLargestSide(Shape s) {
        double longest = 0.0;
        //start with prevPt = the last point
        Point prevPt = s.getLastPoint();
        //for each currPt in the shape - this will find the perimiter
        for (Point currPt : s.getPoints()) {
            //find the distance from prevPt to currPt
            double currDist = prevPt.distance(currPt);
            if(currDist > longest) {
            longest = currDist;
        
    }
    
    return longest;
    }
    }
    
    public double getLargestX(Shape s) {
        double currX = 0.0;
        double largestX = 0.0;
        
        for (Point currPt : s.getPoints()) {
            currX = currPt.getX();
            
            if(currX > largestX) {
                largestX = currX;
        
    }

    return largestX;
    }
    }


    public double getLargestPerimeterMultipleFiles() {
        double currPerim = 0.0;
        double largest = 0.0;
        DirectoryResource dr = new DirectoryResource();
        for (File f : dr.selectedFiles()) {
            FileResource fr = new FileResource(f);
            Shape s = new Shape(fr);
            getPerimeter(s);
            currPerim = getPerimeter(s);
            if((currPerim > largest)) {
                largest = currPerim;
    }
    return currPerim;
    }
    }

    public String getFileWithLargestPerimeter() {
       
    }

    public void testPerimeter() {
        FileResource fr = new FileResource();
        Shape s = new Shape(fr);
        getNumPoints(s);
        getAverageLength(s);
        getLargestSide(s);
        getLargestX(s);
        double length = getPerimeter(s);
        double points = getNumPoints(s);
        double average = getAverageLength(s);
        double largest = getLargestSide(s);
        double largestX = getLargestX(s);
       System.out.printf("perimeter = " + length, "number of points =" + points, 
        "average length =" + average, "largest side ="  + largest, 
        "largest X value = " + largestX);
    
    }
    public void testPerimeterMultipleFiles() {
        // Put code here
         FileResource fr = new FileResource();
        Shape s = new Shape(fr);
        getNumPoints(s);
        getAverageLength(s);
        getLargestSide(s);
        getLargestX(s);
        double length = getPerimeter(s);
        double points = getNumPoints(s);
        double average = getAverageLength(s);
        double largest = getLargestSide(s);
        double largestX = getLargestX(s);
       System.out.printf("perimeter = " + length, "number of points =" + points, 
        "average length =" + average, "largest side ="  + largest, 
        "largest X value = " + largestX);
        
    }

    public void testFileWithLargestPerimeter() {
        double currPerim = 0.0;
        double largest = 0.0;
        
        File myFile = null;
        
        DirectoryResource dr = new DirectoryResource();
        for (File f : dr.selectedFiles()) {
            FileResource fr = new FileResource(f);
            Shape s = new Shape(fr);
            currPerim = getPerimeter(s);
            
            if(currPerim > largest) {
                largest = currPerim;
        
    }
             myFile = f;   
    }
   
    File fileObject = getFileWithLargestPerimeter();
    String myFileName = myFile.getName();
    System.out.println();
  
    }
    // This method creates a triangle that you can use to test your other methods
    public void triangle(){
        Shape triangle = new Shape();
        triangle.addPoint(new Point(0,0));
        triangle.addPoint(new Point(6,0));
        triangle.addPoint(new Point(3,6));
        for (Point p : triangle.getPoints()){
            System.out.println(p);
        }
        double peri = getPerimeter(triangle);
        System.out.println("perimeter = "+peri);
    }

    // This method prints names of all files in a chosen folder that you can use to test your other methods
    public void printFileNames() {
        DirectoryResource dr = new DirectoryResource();
        for (File f : dr.selectedFiles()) {
            System.out.println(f);
        }
    }

    public static void main (String[] args) {
        PerimeterAssignmentRunner pr = new PerimeterAssignmentRunner();
        pr.testPerimeter();
    }
}
